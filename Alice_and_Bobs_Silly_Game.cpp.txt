Alice and Bob invented the following silly game:
The game starts with an integer, n, that's used to build a set of n distinct integers in the inclusive range from 1 to n (i.e.,
set = {1,2,3,......,n-1,n}).
Alice always plays first, and the two players move in alternating turns.
During each move, the current player chooses a prime number, p, from set. The player then removes p and all of its multiples from set.
The first player to be unable to make a move loses the game.
Alice and Bob play g games. Given the value of n for each game, print the name of the game's winner on a new line. If Alice wins, print Alice; otherwise, print Bob.

Note: Each player always plays optimally, meaning they will not make a move that causes them to lose the game if some better, winning move exists.

Input Format

The first line contains an integer, g, denoting the number of games Alice and Bob play.
Each line i of the g subsequent lines contains a single integer, n, describing a game.

Constraints
1 <= g <= 1000
1 <= n <= 10^5
Substasks
1 <= n <= 1000 for 50% of the maximum score

Output Format
For each game, print the name of the winner on a new line. If Alice wins, print Alice; otherwise, print Bob.

Sample Input 0
3
1
2
5

Sample Output 0
Bob
Alice
Alice

Explanation 0
Alice and Bob play the following g = 3 games:
We are given n = 1, so set = {1}. Because Alice has no valid moves(there are no prime numbers in the set), she loses the game. Thus, we print Bob on a new line.
We are given n = 2, so set = {1,2}. Alice chooses the prime number p = 2 and deletes it from the set, which becomes set = {1}. Because Bob has no valid moves (there are no prime numbers in 
the set), he loses the game. Thus, we print Alice on a new line.
We are given n = 5, so set = {1,2,3,4,5}. Alice chooses the prime number p = 2 and deletes the numbers 2 and 4 from the set, which becomes set = {1,3,5}. Now there are two primes left, 3 
and 5. Bob can remove either prime from the set, and then Alice can remove the remaining prime. Because Bob is left without a final move, Alice will always win. Thus, we print Alice on a 
new line.







SOLUTION



#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;
const int N = 200100;
const int M = 100100;
bool unprime[N];
int prime[N], primecnt[M];
int n, num;

void init(){
    num = 0;
    memset(unprime, 0, sizeof(unprime));
    memset(primecnt, 0, sizeof(primecnt));
    for(int i = 2 ; i < N ; ++ i){ 
        if(!unprime[i])                 
            prime[num ++]=i;    
        for(int j = 0 ; j < num && i * prime[j] <  N ; ++ j)  {                 
                unprime[i*prime[j]] = 1;    
            if(!(i % prime[j] ))                    
                break;             
        }          
    }
    int id = 0;
    for(int i = 2; i < M; ++ i){
        primecnt[i] = primecnt[i - 1];
        if(i == prime[id]){
            ++ primecnt[i];
            ++ id;
        }
    }
}

int main(){
    init();
    int T;
    scanf("%d",&T);
    while(T --){
        scanf("%d",&n);
        if(primecnt[n]%2 == 1)
            puts("Alice");
        else
            puts("Bob");
    }
    return 0;
}